RAILS NEW PROJECT
----------------------------------------
rails new Hosital_Management -d postgres

CREATE DATABASE(config ->database.yml)
-----------------------------------------
rake db:create

CREATE TABLE
------------------------------------------
*	rails generate model patient
	rake db:migrate

ADD COLUMN
------------------------------------------
*	rails g migration add_Gender_to_patients Gender:string
	rake db:migrate

CHANGE DATA TYPE
-------------------------------------------
	change_column :medical_records, :Problem, :string

*	rails g migration change_data_type_for_problem
	rake db:migrate

REMOVE COLUMN FROM DATABASE
--------------------------------------------
*	rails g migration remove_delete_from_patients delete:string
	rake db:migrate

DROP TABLE IN RAILS
---------------------------------------------
	drop_table :doctors

*	rails g migration DropDoctors
	rake db:migrate

RENAME COLUMN 
----------------------------------------------
	rename_column :patients, :Extra, :New_Name

*	rails g migration rename_column_extra_from_patient
	rake db:migrate	

ADD FOREIGN KEY
----------------------------------------------
	You can simply write referencing_table_name:references to terminal-
	add_reference :patients, :hospital, null: false, foreign_key: true

*	rails g migration add_hospital_to_patient hospital:references
	rake db:migrate	

	When we want to add foreign key at the time table creation-
	t.references :referencing_table_name

REMOVE FOREIGN KEY
----------------------------------------------
	remove_foreign_key :hospitals, :patients

*	rails g migration reove_foreign_key_from_hospitals 
	rake db:migrate	

*	rails g migration remove_hospital_from_hosps hospital:references
	
	remove_reference :hosps, :hospital, null: false, foreign_key: true

ROLLBACK
-----------------------------------------------
* 	rake db:rollback STEP=2

*   rake db:migrate:up VERSION=-------------(reversible method)

RENAME TABLE
------------------------------------------------
*	rename_table:extra_tables, :extras
	
	rails g migration change_table_extra_table_to_extra
	rake db:migrate

ADD INDEX
-------------------------------------------------
*	add_index :extras, :name

	rails g migration add_index_to_extras

--------------------------------------------------
DESTROY MODEL
*	rails destroy model test

---------------------------------------------------------------
INSERTING DATA INTO TABLES
*	Role.create(name:Manager)

*	ap Role.all
	[
    [0] #<Role:0x00005583b57dcad8> {
                :id => 1,
              :name => "Manager",
        :created_at => Fri, 07 Feb 2020 10:54:27 UTC +00:00,
        :updated_at => Fri, 07 Feb 2020 10:54:27 UTC +00:00
    },
    [1] #<Role:0x00005583b6ec7158> {
                :id => 2,
              :name => "Admin",
        :created_at => Fri, 07 Feb 2020 10:55:19 UTC +00:00,
        :updated_at => Fri, 07 Feb 2020 10:55:19 UTC +00:00
    },
    [2] #<Role:0x00005583b6ec7090> {
                :id => 3,
              :name => "Employee",
        :created_at => Fri, 07 Feb 2020 11:20:26 UTC +00:00,
        :updated_at => Fri, 07 Feb 2020 11:20:26 UTC +00:00
    }
]

*	ap Role.last
	 	  :id => 3,
          :name => "Employee",
    :created_at => Fri, 07 Feb 2020 11:20:26 UTC +00:00,
    :updated_at => Fri, 07 Feb 2020 11:20:26 UTC +00:00

*	ap Role.first
		  :id => 1,
          :name => "Manager",
    :created_at => Fri, 07 Feb 2020 10:54:27 UTC +00:00,
    :updated_at => Fri, 07 Feb 2020 10:54:27 UTC +00:00

*	 User.create(first_name:"Mayank",last_name:"singhla",email:"mayank@gmail.com",age:28,gender:"Male",salar
		y:80000,address:"Gujarat",phone:2884567678,roles_id:1)

		User.all

		[
    [0] #<User:0x00005583b4b8cdc8> {
                :id => 1,
        :first_name => "Ritu",
         :last_name => "Aggarwal",
             :email => "ritu09@gmail.com",
               :age => 32,
            :gender => "Female",
            :salary => 100000.0,
          :roles_id => 1,
        :created_at => Fri, 07 Feb 2020 12:09:22 UTC +00:00,
        :updated_at => Fri, 07 Feb 2020 12:09:22 UTC +00:00,
           :address => "Delhi",
             :phone => 9887567896
    },
    [1] #<User:0x00005583b4b8cb70> {
                :id => 2,
        :first_name => "Priya",
         :last_name => "Sharma",
             :email => "priya@gmail.com",
               :age => 28,
            :gender => "Female",
            :salary => 200000.0,
        :created_at => Fri, 07 Feb 2020 12:10:26 UTC +00:00,
        :updated_at => Fri, 07 Feb 2020 12:10:26 UTC +00:00,
           :address => "Goa",
             :phone => 9884567896
    },
    [2] #<User:0x00005583b4b8c9b8> {
                :id => 3,
        :first_name => "Rakesh",
         :last_name => "thakur",
             :email => "rakesh@gmail.com",
               :age => 25,
            :gender => "Male",
            :salary => 20000.0,
          :roles_id => 3,
        :created_at => Fri, 07 Feb 2020 12:11:49 UTC +00:00,
        :updated_at => Fri, 07 Feb 2020 12:11:49 UTC +00:00,
           :address => "Pune",
             :phone => 9884567678
    },
    [3] #<User:0x00005583b4b8c5f8> {
                :id => 4,
        :first_name => "Mayank",
         :last_name => "singhla",
             :email => "mayank@gmail.com",
               :age => 28,
            :gender => "Male",
            :salary => 80000.0,
          :roles_id => 1,
        :created_at => Fri, 07 Feb 2020 12:13:04 UTC +00:00,
        :updated_at => Fri, 07 Feb 2020 12:13:04 UTC +00:00,
           :address => "Gujarat",
             :phone => 2884567678
    }
]

*	User.last.update(age:25)
  User Load (0.7ms)  SELECT "users".* FROM "users" ORDER BY "users"."id" DESC LIMIT $1  [["LIMIT", 1]]
   (0.4ms)  BEGIN
  User Update (37.2ms)  UPDATE "users" SET "age" = $1, "updated_at" = $2 WHERE "users"."id" = $3  [["age", 25], ["updated_at", "2020-02-07 12:23:49.943167"], ["id", 4]]
   (26.2ms)  COMMIT
true

*	2.7.0 :019 > Role.last.delete
  Role Load (1.0ms)  SELECT "roles".* FROM "roles" ORDER BY "roles"."id" DESC LIMIT $1  [["LIMIT", 1]]
  Role Destroy (30.5ms)  DELETE FROM "roles" WHERE "roles"."id" = $1  [["id", 3]]

	#<Role:0x00005583b6a48690> 
	{
	            :id => 3,
	          :name => "Employee",
	    :created_at => Fri, 07 Feb 2020 11:20:26 UTC +00:00,
	    :updated_at => Fri, 07 Feb 2020 11:20:26 UTC +00:00
	}

*	2.7.0 :021 > User.count
   (1.1ms)  SELECT COUNT(*) FROM "users"
	4

*	Event.where(id:2).update(user_id:3)
		or
	Event.second.update(user_id:3)	
	
* 	 User.where(age:25)

*	Belongs_to
	
	class User < ApplicationRecord
	  belongs_to :role
	end  

*	class Role < ApplicationRecord
	  has_many :users
	end

	Role.first.users
	 
	[
    [0] #<User:0x00007f4d44296c40> {
                :id => 1,
        :first_name => "Ritu",
         :last_name => "Aggarwal",
             :email => "ritu09@gmail.com",
               :age => 32,
            :gender => "Female",
            :salary => 100000.0,
           :role_id => 1,
        :created_at => Fri, 07 Feb 2020 12:09:22 UTC +00:00,
        :updated_at => Fri, 07 Feb 2020 12:09:22 UTC +00:00,
           :address => "Delhi",
             :phone => 9887567896
    },
    [1] #<User:0x00007f4d442969e8> {
                :id => 4,
        :first_name => "Mayank",
         :last_name => "singhla",
             :email => "mayank@gmail.com",
               :age => 25,
            :gender => "Male",
            :salary => 80000.0,
           :role_id => 1,
        :created_at => Fri, 07 Feb 2020 12:13:04 UTC +00:00,
        :updated_at => Fri, 07 Feb 2020 12:23:49 UTC +00:00,
           :address => "Gujarat",
             :phone => 2884567678
    }
]

*	 User.find(2).events

	[
    [0] #<Event:0x00005638dcd46be0> {
                    :id => 4,
                  :name => "Priya's Wedding",
                  :date => Sun, 10 May 2020,
        :event_types_id => 1,
            :created_at => Mon, 10 Feb 2020 05:28:30 UTC +00:00,
            :updated_at => Mon, 10 Feb 2020 05:28:30 UTC +00:00,
               :user_id => 2
    },
    [1] #<Event:0x00005638dcd46a78> {
                    :id => 6,
                  :name => "Priya's Party",
                  :date => Mon, 10 Feb 2020,
        :event_types_id => 2,
            :created_at => Mon, 10 Feb 2020 05:40:12 UTC +00:00,
            :updated_at => Mon, 10 Feb 2020 10:52:03 UTC +00:00,
               :user_id => 2
    }
]
 
*	 User.third.destroy

	  User Load (1.1ms)  SELECT "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT $1 OFFSET $2  [["LIMIT", 1], ["OFFSET", 2]]

	   (0.4ms)  BEGIN
	  Event Load (0.5ms)  SELECT "events".* FROM "events" WHERE "events"."user_id" = $1  [["user_id", 3]]
	  Event Destroy (20.3ms)  DELETE FROM "events" WHERE "events"."id" = $1  [["id", 5]]
	  Event Destroy (1.1ms)  DELETE FROM "events" WHERE "events"."id" = $1  [["id", 2]]
	  User Destroy (1.1ms)  DELETE FROM "users" WHERE "users"."id" = $1  [["id", 3]]
	   (16.6ms)  COMMIT
 	
 	class Role < ApplicationRecord
	  has_many :users, dependent: :destroy
	end

	class User < ApplicationRecord
	  belongs_to :role
	  has_many :events, dependent: :destroy
	  has_many :event_types, through: :events
	end

*	Event.create(name: User.last.first_name, user_id: User.last.id, date: Date.today, event_type_id: 	EventType.last.id) 
	
[
    [0] #<Event:0x000055c860560bc0>
    {
                   :id => 7,
                 :name => "Akansha",
                 :date => Tue, 11 Feb 2020,
        :event_type_id => 5,
           :created_at => Tue, 11 Feb 2020 09:07:21 UTC +00:00,
           :updated_at => Tue, 11 Feb 2020 09:07:21 UTC +00:00,
              :user_id => 8
    }
]

*	Event.create(name: User.find_by(id:2).first_name + " " + EventType.find_by(id:2).type_, user_id:User.find_by(id:2).id, date:"13/4/2019", event_type_id: EventType.find_by(id:2).id)

	      :id => 12,
             :name => "Rahul Birthday",
             :date => Sat, 13 Apr 2019,
    :event_type_id => 2,
       :created_at => Tue, 11 Feb 2020 09:31:54 UTC +00:00,
       :updated_at => Tue, 11 Feb 2020 09:31:54 UTC +00:00,
          :user_id => 2
}

*	Event.create(name: User.find_by(id:7).first_name + " " + EventType.find_by(id:1).type_, user_id: User.find_by(id:7).id, date:"13/4/2020", event_type_id: EventType.find_by(id:1).id) 

	  :id => 14,
             :name => "Ritu Wedding",
             :date => Mon, 13 Apr 2020,
    :event_type_id => 1,
       :created_at => Tue, 11 Feb 2020 09:36:05 UTC +00:00,
       :updated_at => Tue, 11 Feb 2020 09:36:05 UTC +00:00,
          :user_id => 7

*	User.create(first_name:"Ritika",last_name:"Verma", email:"ritika@gmail.com", age:31, gender:"female", salary:71000 , role_id: Role.first.id)

	         :id => 9,
    :first_name => "Ritika",
     :last_name => "Verma",
         :email => "ritika@gmail.com",
           :age => 31,
        :gender => "female",
        :salary => 71000.0,
       :role_id => 1,
    :created_at => Tue, 11 Feb 2020 09:43:21 UTC +00:00,
    :updated_at => Tue, 11 Feb 2020 09:43:21 UTC +00:00,
       :address => nil,
         :phone => nil
}

*	User.find_by(id:9).update(address:"Punjab",phone:7865787098)

*	Has_many : through
	
	class User < ApplicationRecord
	  belongs_to :role
	  has_many :events, dependent: :destroy
	  has_many :event_types, through: :events
	end

	class Event < ApplicationRecord
	   belongs_to :user
	   belongs_to :event_type
	end

	class EventType < ApplicationRecord
	    has_many :events
	    has_many :user, through: :events
	end

*	User.first.event_types

	[0] #<EventType:0x00007fdaa8559170> 
	{
                :id => 2,
             :type_ => "Birthday",
        :created_at => Mon, 10 Feb 2020 05:17:16 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 05:17:16 UTC +00:00,
              :cost => 20000
    }

*	User.find_by(id:7).event_types

	 [0] #<EventType:0x000055c860de4620> {
                :id => 1,
             :type_ => "Wedding",
        :created_at => Mon, 10 Feb 2020 05:16:51 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 05:16:51 UTC +00:00,
              :cost => 1000000
    }

*	User.find_by(role_id:Role.find_by(id:1) , age:31)
	
            :id => 9,
    :first_name => "Ritika",
     :last_name => "Verma",
         :email => "ritika@gmail.com",
           :age => 31,
        :gender => "female",
        :salary => 71000.0,
       :role_id => 1,
    :created_at => Tue, 11 Feb 2020 09:43:21 UTC +00:00,
    :updated_at => Tue, 11 Feb 2020 09:44:27 UTC +00:00,
       :address => "Punjab",
         :phone => 7865787098

*	a = User.find_by(role_id:Role.find_by(id:1) , age:31)
	a.first_name + " " + a.last_name
	"Ritika Verma"

*	 User.find_by(id:8).events.count
	
	User Load (0.9ms)  SELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2  [["id", 8], ["LIMIT", 1]]
    (1.0ms)  SELECT COUNT(*) FROM "events" WHERE "events"."user_id" = $1  [["user_id", 8]]
	
	2

*	User.find_by(role_id:Role.find_by(id:3)).events.count
	 
	Role Load (0.6ms)  SELECT "roles".* FROM "roles" WHERE "roles"."id" = $1 LIMIT $2  [["id", 3], ["LIMIT", 1]]
  	User Load (0.5ms)  SELECT "users".* FROM "users" WHERE "users"."role_id" = $1 LIMIT $2  [["role_id", 3], ["LIMIT", 1]]
    (0.8ms)  SELECT COUNT(*) FROM "events" WHERE "events"."user_id" = $1  [["user_id", 8]]	
	
	2
	
*	 User.find([1,2,7])

[
    [0] #<User:0x00007fdaa80df5e0> {
                :id => 1,
        :first_name => "Priya",
         :last_name => "Sharma",
             :email => "priya@gmail.com",
               :age => 28,
            :gender => "Female",
            :salary => 200000.0,
           :role_id => 2,
        :created_at => Fri, 07 Feb 2020 12:10:26 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 07:06:22 UTC +00:00,
           :address => "Goa",
             :phone => 9884567896
    },
    [1] #<User:0x00007fdaa80df400> {
                :id => 2,
        :first_name => "Rahul",
         :last_name => "jain",
             :email => "Rahul@gamil.com",
               :age => 23,
            :gender => "male",
            :salary => 25000.0,
           :role_id => 3,
        :created_at => Tue, 11 Feb 2020 05:32:56 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 07:08:40 UTC +00:00,
           :address => "Delhi",
             :phone => 9811786234
    },
    [2] #<User:0x00007fdaa80df248> {
                :id => 7,
        :first_name => "Ritu",
         :last_name => "Rao",
             :email => "ritu@gmail.com",
               :age => 21,
            :gender => "Female",
            :salary => 30000.0,
           :role_id => 1,
        :created_at => Tue, 11 Feb 2020 07:11:35 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 07:11:35 UTC +00:00,
           :address => "Fbd",
             :phone => 4576553345
    }
]

*	Event.where(user_id:User.find_by(role_id:Role.find_by(id:3)))
	
	[
    [0] #<Event:0x000055c85e8bb5b0> {
                   :id => 7,
                 :name => "Akansha Family Function",
                 :date => Tue, 11 Feb 2020,
        :event_type_id => 5,
           :created_at => Tue, 11 Feb 2020 09:07:21 UTC +00:00,
           :updated_at => Tue, 11 Feb 2020 09:40:04 UTC +00:00,
              :user_id => 8
    },
    [1] #<Event:0x000055c85e8bb470> {
                   :id => 15,
                 :name => "Akansha Bachelors",
                 :date => Fri, 08 May 2020,
        :event_type_id => 3,
           :created_at => Tue, 11 Feb 2020 09:38:54 UTC +00:00,
           :updated_at => Tue, 11 Feb 2020 09:38:54 UTC +00:00,
              :user_id => 8
    }
]

*	a = Event.where(user_id:User.find_by(role_id:Role.find_by(id:3)))
	 a.first.date
 	 
 	 Tue, 11 Feb 2020

*	User.where(age:25..32)

	[
    [0] #<User:0x000055c85e94fb48> {
                :id => 1,
        :first_name => "Priya",
         :last_name => "Sharma",
             :email => "priya@gmail.com",
               :age => 28,
            :gender => "Female",
            :salary => 200000.0,
           :role_id => 2,
        :created_at => Fri, 07 Feb 2020 12:10:26 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 07:06:22 UTC +00:00,
           :address => "Goa",
             :phone => 9884567896
    },
    [1] #<User:0x000055c85e94f940> {
                :id => 9,
        :first_name => "Ritika",
         :last_name => "Verma",
             :email => "ritika@gmail.com",
               :age => 31,
            :gender => "female",
            :salary => 71000.0,
           :role_id => 1,
        :created_at => Tue, 11 Feb 2020 09:43:21 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 09:44:27 UTC +00:00,
           :address => "Punjab",
             :phone => 7865787098
    }
]

*	User.where(age:25..32, role_id:Role.find_by(id:1))

	[
    [0] #<User:0x00007fdaa83243c8> {
                :id => 9,
        :first_name => "Ritika",
         :last_name => "Verma",
             :email => "ritika@gmail.com",
               :age => 31,
            :gender => "female",
            :salary => 71000.0,
           :role_id => 1,
        :created_at => Tue, 11 Feb 2020 09:43:21 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 09:44:27 UTC +00:00,
           :address => "Punjab",
             :phone => 7865787098
    }
]

*	User.where(age:25..32, role_id:Role.find_by(id:1)).first.class

	class User < ApplicationRecord 
	{
            :id => :integer,
    :first_name => :text,
     :last_name => :text,
         :email => :string,
           :age => :integer,
        :gender => :string,
        :salary => :decimal,
       :role_id => :integer,
    :created_at => :datetime,
    :updated_at => :datetime,
       :address => :string,
         :phone => :integer
	}

*	User.where('first_name ilike ? AND age = ?', '%r%' , 31)
	OR
	ser.where('first_name like ? AND age > ?', '%R%' , 30)

	 [0] #<User:0x000055c860927678> {
                :id => 9,
        :first_name => "Ritika",
         :last_name => "Verma",
             :email => "ritika@gmail.com",
               :age => 31,
            :gender => "female",
            :salary => 71000.0,
           :role_id => 1,
        :created_at => Tue, 11 Feb 2020 09:43:21 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 09:44:27 UTC +00:00,
           :address => "Punjab",
             :phone => 7865787098
    }

*	string = "r"
	User.where('first_name ilike ?',"%#{string}%").count
   (1.2ms)  SELECT COUNT(*) FROM "users" WHERE (first_name ilike '%r%')
	4

*	User.where('first_name ilike ?',"%#{string}%").first(2)
	
	[0] #<User:0x000055c8608e3d88> {
                :id => 1,
        :first_name => "Priya",
         :last_name => "Sharma",
             :email => "priya@gmail.com",
               :age => 28,
            :gender => "Female",
            :salary => 200000.0,
           :role_id => 2,
        :created_at => Fri, 07 Feb 2020 12:10:26 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 07:06:22 UTC +00:00,
           :address => "Goa",
             :phone => 9884567896
    },
    [1] #<User:0x000055c8608e3cc0> {
                :id => 2,
        :first_name => "Rahul",
         :last_name => "jain",
             :email => "Rahul@gamil.com",
               :age => 23,
            :gender => "male",
            :salary => 25000.0,
           :role_id => 3,
        :created_at => Tue, 11 Feb 2020 05:32:56 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 07:08:40 UTC +00:00,
           :address => "Delhi",
             :phone => 9811786234
    }


*	User.where(:age => 25..31).sum(:salary)
   	
   	(0.9ms)  SELECT SUM("users"."salary") FROM "users" WHERE "users"."age" BETWEEN $1 AND $2  [["age", 25], ["age", 31]]
	271000.0

*	 User.where(:age => 20..31).order(:first_name)
	    [0] #<User:0x000055c86059a280> {
                :id => 8,
        :first_name => "Akansha",
         :last_name => "Rao",
             :email => "akansha@gmail.com",
               :age => 21,
            :gender => "Female",
            :salary => 30000.0,
           :role_id => 3,
        :created_at => Tue, 11 Feb 2020 07:12:51 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 07:12:51 UTC +00:00,
           :address => "Mumbai",
             :phone => 4576559345
    },
    [1] #<User:0x000055c86059a1b8> {
                :id => 1,
        :first_name => "Priya",
         :last_name => "Sharma",
             :email => "priya@gmail.com",
               :age => 28,
            :gender => "Female",
            :salary => 200000.0,
           :role_id => 2,
        :created_at => Fri, 07 Feb 2020 12:10:26 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 07:06:22 UTC +00:00,
           :address => "Goa",
             :phone => 9884567896
    },
    [2] #<User:0x000055c86059a0f0> {
                :id => 2,
        :first_name => "Rahul",
         :last_name => "jain",
             :email => "Rahul@gamil.com",
               :age => 23,
            :gender => "male",
            :salary => 25000.0,
        :created_at => Tue, 11 Feb 2020 05:32:56 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 07:08:40 UTC +00:00,
           :address => "Delhi",
             :phone => 9811786234
    },
    [3] #<User:0x000055c860599fd8> {
                :id => 9,
        :first_name => "Ritika",
         :last_name => "Verma",
             :email => "ritika@gmail.com",
               :age => 31,
            :gender => "female",
            :salary => 71000.0,
           :role_id => 1,
        :created_at => Tue, 11 Feb 2020 09:43:21 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 09:44:27 UTC +00:00,
           :address => "Punjab",
             :phone => 7865787098
    },
    [4] #<User:0x000055c860599ee8> {
                :id => 7,
        :first_name => "Ritu",
         :last_name => "Rao",
             :email => "ritu@gmail.com",
               :age => 21,
            :gender => "Female",
            :salary => 30000.0,
           :role_id => 1,
        :created_at => Tue, 11 Feb 2020 07:11:35 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 07:11:35 UTC +00:00,
           :address => "Fbd",
             :phone => 4576553345
    }

*	 User.where(:age => 20..31).order(:first_name).reverse_order
	User Exists? (1.6ms)  SELECT 1 AS one FROM "users" WHERE "users"."age" BETWEEN $1 AND $2 LIMIT $3  [["age", 20], ["age", 31], ["LIMIT", 1]]
	
	User Load (0.7ms)  SELECT "users".* FROM "users" WHERE "users"."age" BETWEEN $1 AND $2 ORDER BY "users"."first_name" DESC  [["age", 20], ["age", 31]]

	[0] #<User:0x000055c8608f1640> {
                :id => 7,
        :first_name => "Ritu",
         :last_name => "Rao",
             :email => "ritu@gmail.com",
               :age => 21,
            :gender => "Female",
            :salary => 30000.0,
           :role_id => 1,
        :created_at => Tue, 11 Feb 2020 07:11:35 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 07:11:35 UTC +00:00,
           :address => "Fbd",
             :phone => 4576553345
    },
    [1] #<User:0x000055c8608b8340> {
                :id => 9,
        :first_name => "Ritika",
         :last_name => "Verma",
             :email => "ritika@gmail.com",
               :age => 31,
            :gender => "female",
            :salary => 71000.0,
           :role_id => 1,
        :created_at => Tue, 11 Feb 2020 09:43:21 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 09:44:27 UTC +00:00,
           :address => "Punjab",
             :phone => 7865787098
    },
    [2] #<User:0x000055c8608b8278> {
                :id => 2,
        :first_name => "Rahul",
         :last_name => "jain",
             :email => "Rahul@gamil.com",
               :age => 23,
            :gender => "male",
            :salary => 25000.0,
           :role_id => 3,
        :created_at => Tue, 11 Feb 2020 05:32:56 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 07:08:40 UTC +00:00,
           :address => "Delhi",
             :phone => 9811786234
    },
    [3] #<User:0x000055c8608b81b0> {
                :id => 1,
        :first_name => "Priya",
         :last_name => "Sharma",
             :email => "priya@gmail.com",
               :age => 28,
            :gender => "Female",
            :salary => 200000.0,
           :role_id => 2,
        :created_at => Fri, 07 Feb 2020 12:10:26 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 07:06:22 UTC +00:00,
           :address => "Goa",
             :phone => 9884567896
    },
    [4] #<User:0x000055c8608b80e8> {
                :id => 8,
        :first_name => "Akansha",
         :last_name => "Rao",
             :email => "akansha@gmail.com",
               :age => 21,
            :gender => "Female",
            :salary => 30000.0,
           :role_id => 3,
        :created_at => Tue, 11 Feb 2020 07:12:51 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 07:12:51 UTC +00:00,
           :address => "Mumbai",
             :phone => 4576559345
    }

*	Event.where(event_type_id:EventType.find_by(type_:"Birthday"),user_id:Role.find_by(name:"Manager"))

[
    [0] #<Event:0x00005646ac4e3bc8> {
                   :id => 12,
                 :name => "Rahul Birthday",
                 :date => Sat, 13 Apr 2019,
        :event_type_id => 2,
           :created_at => Tue, 11 Feb 2020 09:31:54 UTC +00:00,
           :updated_at => Tue, 11 Feb 2020 09:31:54 UTC +00:00,
              :user_id => 2
    }
]

*	User.select([:id,:first_name])
	
	[
    [0] #<User:0x00005646ac029718> {
                "id" => 1,
        "first_name" => "Priya"
    },
    [1] #<User:0x00005646ac029650> {
                "id" => 2,
        "first_name" => "Rahul"
    },
    [2] #<User:0x00005646ac029588> {
                "id" => 7,
        "first_name" => "Ritu"
    },
    [3] #<User:0x00005646ac0294c0> {
                "id" => 8,
        "first_name" => "Akansha"
    },
    [4] #<User:0x00005646ac0293f8> {
                "id" => 9,
        "first_name" => "Ritika"
    }
]

*	Difference between find_by and find_by!

	User.find_by(id:30)
	
	User Load (0.8ms)  SELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2  [["id", 30], ["LIMIT", 1]]
	nil

	User.find_by!(id:30)
  	User Load (1.1ms)  SELECT "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2  [["id", 30], ["LIMIT", 1]]
	Traceback (most recent call last):
    ActiveRecord::RecordNotFound (Couldn't find User)

*	a = Role.take(2)
	  	Role Load (0.9ms)  SELECT "roles".* FROM "roles" LIMIT $1  [["LIMIT", 2]]
	a.class
		Array < Object

[
    [0] #<Role:0x00005646ac66a1b8> 
    {
                :id => 3,
              :name => "Employee",
        :created_at => Mon, 10 Feb 2020 06:53:56 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 06:55:03 UTC +00:00
    },
    
    [1] #<Role:0x00005646ac66a0f0> 
    {
                :id => 1,
              :name => "Admin",
        :created_at => Tue, 11 Feb 2020 06:51:18 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 06:51:18 UTC +00:00
    }
]

*	Role.order(:name).first
	Role Load (0.8ms)  SELECT "roles".* FROM "roles" ORDER BY "roles"."name" ASC LIMIT $1  [["LIMIT", 1]]

	#<Role:0x00005646ac1cb4e0> 
	{
            :id => 1,
          :name => "Admin",
    :created_at => Tue, 11 Feb 2020 06:51:18 UTC +00:00,
    :updated_at => Tue, 11 Feb 2020 06:51:18 UTC +00:00
	}

*	User.group(:first_name).sum(:salary)

	{
      "Rahul" => 25000.0,
    "Akansha" => 30000.0,
     "Ritika" => 71000.0,
       "Ritu" => 30000.0,
      "Priya" => 200000.0
	}

*	User.select("sum(salary)").group(:role_id)

	[
    [0] #<User:0x000055acee47b5f8> {
         "id" => nil,
        "sum" => 55000.0
    },
    [1] #<User:0x000055acee47b530> {
         "id" => nil,
        "sum" => 200000.0
    },
    [2] #<User:0x000055acee47b468> {
         "id" => nil,
        "sum" => 101000.0
    }
	]
	
*	find_each
	
	2.7.0 :126 > Role.where("id > 2").find_each do |r|
	2.7.0 :127 >   puts r.id
	2.7.0 :128 >   puts r.name
	2.7.0 :129 > end
	  Role Load (1.1ms)  SELECT "roles".* FROM "roles" WHERE (id > 2) ORDER BY "roles"."id" ASC LIMIT $1  [["LIMIT", 1000]]
	3
	Employee
	6
	Assistant
	nil
	
	2.7.0 :130 >Role.find_each(batch_size: 5000) do |r|
	2.7.0 :131 >   puts r.id
	2.7.0 :132 >   puts r.name
	2.7.0 :133 > end

	Role Load (0.8ms)  SELECT "roles".* FROM "roles" ORDER BY "roles"."id" ASC LIMIT $1  [["LIMIT", 5000]]
	1
	Admin
	2
	Manager
	3
	Employee
	6
	Assistant

	2.7.0 :158 > Role.find_each(start: 2 , finish:3 ) do |r|
	2.7.0 :159 >   puts r.id
	2.7.0 :160 >   puts r.name
	2.7.0 :161 > end
	  Role Load (0.8ms)  SELECT "roles".* FROM "roles" WHERE "roles"."id" >= $1 AND "roles"."id" <= $2 ORDER BY "roles"."id" ASC LIMIT $3  [["id", 2], ["id", 3], ["LIMIT", 1000]]
	2
	Manager
	3
	Employee
	nil

*	Find_in_batches

	2.7.0 :224 > Role.find_in_batches do |r|
	2.7.0 :225 >   sleep(5)
	2.7.0 :226 >   r.each {|ro| puts ro.name} 
	2.7.0 :227 > end
	  Role Load (0.8ms)  SELECT "roles".* FROM "roles" ORDER BY "roles"."id" ASC LIMIT $1  [["LIMIT", 1000]]
	Admin
	Manager
	Employee
	Assistant
	nil

*	Role.where("id in (?)",[1,2])
	
	[
    [0] #<Role:0x00005568c8a7a6d0> {
                :id => 2,
              :name => "Manager",
        :created_at => Fri, 07 Feb 2020 10:55:19 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 11:05:52 UTC +00:00
    },
    [1] #<Role:0x00005568c8a7a608> {
                :id => 1,
              :name => "Admin",
        :created_at => Tue, 11 Feb 2020 06:51:18 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 06:51:18 UTC +00:00
    }
	]

*	2.7.0 :272 > User.where("id in (?)",[Role.find_by(name:"Admin"),Role.find_by(name:"Manager")]).select(:id,:first_name)

	[
    [0] #<User:0x00005568c8da86b8> {
                "id" => 1,
        "first_name" => "Priya"
    },
    [1] #<User:0x00005568c8da85c8> {
                "id" => 2,
        "first_name" => "Rahul"
    }
	]

*	 Role.where(created_at:(Time.now.midnight-3.day)..Time.now.midnight)  
	
	[
    [0] #<Role:0x00007f38ec4daae0>
    {
                :id => 3,
              :name => "Employee",
        :created_at => Mon, 10 Feb 2020 06:53:56 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 06:55:03 UTC +00:00
    },
    [1] #<Role:0x00007f38ec4da6a8>
    {
                :id => 1,
              :name => "Admin",
        :created_at => Tue, 11 Feb 2020 06:51:18 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 06:51:18 UTC +00:00
    },
    [2] #<Role:0x00007f38ec4da518> 
    {
                :id => 6,
              :name => "Assistant",
        :created_at => Wed, 12 Feb 2020 09:32:56 UTC +00:00,
        :updated_at => Wed, 12 Feb 2020 09:32:56 UTC +00:00
    }
	]

*	Role.where.not(id:[1,3]) 
	
	[
    [0] #<Role:0x00005568c8d00ee0> {
                :id => 2,
              :name => "Manager",
        :created_at => Fri, 07 Feb 2020 10:55:19 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 11:05:52 UTC +00:00
    },
    [1] #<Role:0x00005568c8d00da0> {
                :id => 6,
              :name => "Assistant",
        :created_at => Wed, 12 Feb 2020 09:32:56 UTC +00:00,
        :updated_at => Wed, 12 Feb 2020 09:32:56 UTC +00:00
    }
]

*	 User.where(role_id:Role.find_by(name:"admin")).or(User.where(address:"Punjab")) 
		
	[
    [0] #<User:0x00005568c8488b00> {
                :id => 9,
        :first_name => "Ritika",
         :last_name => "Verma",
             :email => "ritika@gmail.com",
               :age => 31,
            :gender => "female",
            :salary => 71000.0,
           :role_id => 1,
        :created_at => Tue, 11 Feb 2020 09:43:21 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 09:44:27 UTC +00:00,
           :address => "Punjab",
             :phone => 7865787098
    }
	]


*	 Role.select("name").distinct

	[
    [0] #<Role:0x00005568c8efcf00> {
          "id" => nil,
        "name" => "Manager"
    },
    [1] #<Role:0x00005568c8efce10> {
          "id" => nil,
        "name" => "Employee"
    },
    [2] #<Role:0x00005568c8efcd48> {
          "id" => nil,
        "name" => "Admin"
    },
    [3] #<Role:0x00005568c8efcc80> {
          "id" => nil,
        "name" => "Assistant"
    }
	]
	
*	Role.group(:name).count

	{
      "Manager" => 1,
     "Employee" => 1,
        "Admin" => 1,
    "Assistant" => 2
	}
	
*	User.select("date(created_at) as ordered_date,sum(salary) as total_salary").group("date(created_at)")

	[
    [0] #<User:0x00005568c8e60498> {
                  "id" => nil,
        "ordered_date" => Fri, 07 Feb 2020,
        "total_salary" => 200000.0
    },
    [1] #<User:0x00005568c8e603d0> {
                  "id" => nil,
        "ordered_date" => Tue, 11 Feb 2020,
        "total_salary" => 156000.0
    }
	]

*	User.select("date(created_at) as ordered_date,sum(salary) as total_salary").group("date(created_at)").having("sum
	(salary) > ?",156000)

	[
    [0] #<User:0x00005568c8ea08b8> 
    {
                  "id" => nil,
        "ordered_date" => Fri, 07 Feb 2020,
        "total_salary" => 200000.0
    }
	]

*	Role.where(id:[1,2]).order('id asc').unscope(:order)
	
	[
    [0] #<Role:0x00007f38ec2941f0> {
                :id => 2,
              :name => "Manager",
        :created_at => Fri, 07 Feb 2020 10:55:19 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 11:05:52 UTC +00:00
    },
    [1] #<Role:0x00007f38ec294088> {
                :id => 1,
              :name => "Admin",
        :created_at => Tue, 11 Feb 2020 06:51:18 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 06:51:18 UTC +00:00
    }
	]

*	Role.where(id:[1,2]).order('id asc').unscope(where: :id).select(:id)

	[
    [0] #<Role:0x00005568c8c538f8> {
        "id" => 1
    },
    [1] #<Role:0x00005568c8c537b8> {
        "id" => 2
    },
    [2] #<Role:0x00005568c8c536a0> {
        "id" => 3
    },
    [3] #<Role:0x00005568c8c535b0> {
        "id" => 6
    },
    [4] #<Role:0x00005568c8c53420> {
        "id" => 8
    }
	]

*	Role.where('id>5').limit(1).order('id asc').only(:order,:where)

	[
    [0] #<Role:0x00005568c7f4be08> {
                :id => 6,
              :name => "Assistant",
        :created_at => Wed, 12 Feb 2020 09:32:56 UTC +00:00,
        :updated_at => Wed, 12 Feb 2020 09:32:56 UTC +00:00
    },
    [1] #<Role:0x00005568c7f4bc00> {
                :id => 8,
              :name => "Assistant",
        :created_at => Thu, 13 Feb 2020 06:32:53 UTC +00:00,
        :updated_at => Thu, 13 Feb 2020 06:32:53 UTC +00:00
    }
]

*	Role.select(:id,:name).reselect(:name).limit(2)

	[
    [0] #<Role:0x00005568c8489bb8> {
          "id" => nil,
        "name" => "Employee"
    },
    [1] #<Role:0x00005568c8489ac8> {
          "id" => nil,
        "name" => "Admin"
    }
	]
	
*	Role.select(:id,:name).order(:name).reverse_order

	[
    [0] #<Role:0x00005568c8d53320> {
          "id" => 2,
        "name" => "Manager"
    },
    [1] #<Role:0x00005568c8d53208> {
          "id" => 3,
        "name" => "Employee"
    },
    [2] #<Role:0x00005568c8d53140> {
          "id" => 6,
        "name" => "Assistant"
    },
    [3] #<Role:0x00005568c8d53078> {
          "id" => 8,
        "name" => "Assistant"
    },
    [4] #<Role:0x00005568c8d52fb0> {
          "id" => 1,
        "name" => "Admin"
    }
]

*	2.7.0 :354 > User.where("id>2").where("id<8")
	
	User Exists? (1.2ms)  SELECT 1 AS one FROM "users" WHERE (id>2) AND (id<8) LIMIT $1  [["LIMIT", 1]]
  	User Load (0.8ms)  SELECT "users".* FROM "users" WHERE (id>2) AND (id<8)

[
    [0] #<User:0x00005568c8ef7f00> 
    {
                :id => 7,
        :first_name => "Ritu",
         :last_name => "Rao",
             :email => "ritu@gmail.com",
               :age => 21,
            :gender => "Female",
            :salary => 30000.0,
           :role_id => 1,
        :created_at => Tue, 11 Feb 2020 07:11:35 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 07:11:35 UTC +00:00,
           :address => "Fbd",
             :phone => 4576553345
    }
]

*	2.7.0 :362 > a = Role.last
	Role Load (1.0ms)  SELECT "roles".* FROM "roles" ORDER BY "roles"."id" DESC LIMIT $1  [["LIMIT", 1]]
	2.7.0 :363 > a.name = "Organizer"
	2.7.0 :364 > a.save
	True

*	2.7.0 :032 > a = Role.readonly.last
	Role Load (0.9ms)  SELECT "roles".* FROM "roles" ORDER BY "roles"."id" DESC LIMIT $1  [["LIMIT", 1]]
	2.7.0 :033 > a.name = "Worker"
	2.7.0 :034 > a.save

	ActiveRecord::ReadOnlyRecord (Role is marked as readonly)	

* EventType.joins(:events).select(:name,:type_)
  
  [
    [0] #<EventType:0x00007f38ec99ad00> {
           "id" => nil,
        "type_" => "Birthday",
         "name" => "Priya Birthday"
    },
    [1] #<EventType:0x00007f38ec99ac10> {
           "id" => nil,
        "type_" => "Birthday",
         "name" => "Rahul Birthday"
    },
    [2] #<EventType:0x00007f38ec99aaf8> {
           "id" => nil,
        "type_" => "Wedding",
         "name" => "Ritu Wedding"
    },
    [3] #<EventType:0x00007f38ec99aa08> {
           "id" => nil,
        "type_" => "Bachelors",
         "name" => "Akansha Bachelors"
    },
    [4] #<EventType:0x00007f38ec99a918> {
           "id" => nil,
        "type_" => "Family Function",
         "name" => "Akansha Family Function"
    }
]

* Role.joins(:users).select("name,first_name").limit(2)

  [
    [0] #<Role:0x00005568c69cd3b0> {
                "id" => nil,
              "name" => "Manager",
        "first_name" => "Priya"
    },
    [1] #<Role:0x00005568c69ccd70> {
                "id" => nil,
              "name" => "Employee",
        "first_name" => "Rahul"
    }
]

*	User.joins(:events,:event_types).select(:address,:type_,"events.name").where(role_id:Role.find_by(
  	name:"Admin")).limit(2)

[
    [0] #<User:0x00007f38eca1bb08> 
    {
             "id" => nil,
        "address" => "Fbd",
          "type_" => "Wedding",
           "name" => "Ritu Wedding"
    }
]

*	2.7.0 :040 > Role.joins(users: :events).select(:name,:first_name,:name)

	[
    [0] #<Role:0x00005568c86fe9e8> {
                "id" => nil,
              "name" => "Manager",
        "first_name" => "Priya"
    },
    [1] #<Role:0x00005568c86fe880> {
                "id" => nil,
              "name" => "Employee",
        "first_name" => "Rahul"
    },
    [2] #<Role:0x00005568c86fe740> {
                "id" => nil,
              "name" => "Admin",
        "first_name" => "Ritu"
    },
    [3] #<Role:0x00005568c86fe628> {
                "id" => nil,
              "name" => "Employee",
        "first_name" => "Akansha"
    },
    [4] #<Role:0x00005568c86fe538> {
                "id" => nil,
              "name" => "Employee",
        "first_name" => "Akansha"
    }
]

*	User.left_outer_joins(:role).select("name,first_name").limit(1)

	[
    [0] #<User:0x00005598da3092b0> {
                "id" => nil,
        "first_name" => "Rahul",
              "name" => "Employee"
    }
	]

	User.left_outer_joins(:event_types).select("name,type_,first_name").limit(1)

	[
    [0] #<User:0x00005598db42a490> {
                "id" => nil,
        "first_name" => "Rahul",
              "name" => "Rahul Birthday",
             "type_" => "Birthday"
    }
]

*	User.includes(:role).limit(1)
	User Exists? (1.2ms)  SELECT 1 AS one FROM "users" LIMIT $1  [["LIMIT", 1]]
	User Load (0.7ms)  SELECT "users".* FROM "users" LIMIT $1  [["LIMIT", 1]]
	Role Load (0.8ms)  SELECT "roles".* FROM "roles" WHERE "roles"."id" = $1  [["id", 3]]

	[
    [0] #<User:0x00005598dac479f8> {
                :id => 2,
        :first_name => "Rahul",
         :last_name => "jain",
             :email => "Rahul@gamil.com",
               :age => 23,
            :gender => "male",
            :salary => 25000.0,
           :role_id => 3,
        :created_at => Tue, 11 Feb 2020 05:32:56 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 07:08:40 UTC +00:00,
           :address => "Delhi",
             :phone => 9811786234
    }
]

*	 Role.find_or_create_by(name:"Publisher")

	            :id => 9,
          :name => "Publisher",
    :created_at => Fri, 14 Feb 2020 10:38:16 UTC +00:00,
    :updated_at => Fri, 14 Feb 2020 10:38:16 UTC +00:00

*	2.7.0 :069 > r = Role.find_or_initialize_by(name:"Publisher")
  	Role Load (1.1ms)  SELECT "roles".* FROM "roles" WHERE "roles"."name" = $1 LIMIT $2  [["name", "Publisher"], ["LIMIT", 1]]
	2.7.0 :070 > r.persisted?
	true
	2.7.0 :071 > r.new_record?
	false

*	Role.find_by_sql("select * from roles inner join users on roles.id = users.role_id order by roles.created_at desc limit 	1")

	[
    [0] #<Role:0x00005598d938b9a0> {
                "id" => 7,
              "name" => "Admin",
        "created_at" => Tue, 11 Feb 2020 07:11:35 UTC +00:00,
        "updated_at" => Tue, 11 Feb 2020 07:11:35 UTC +00:00,
        "first_name" => "Ritu",
         "last_name" => "Rao",
             "email" => "ritu@gmail.com",
               "age" => 21,
            "gender" => "Female",
            "salary" => 30000.0,
           "role_id" => 1,
           "address" => "Fbd",
             "phone" => 4576553345
    }
]

*	 Role.connection.select_all("select name from roles where id = '1'").to_a

	[
    	[0] 
    	{
        	"name" => "Admin"
    	}
	]
	

*	Role.distinct.pluck(:name)

	[
    [0] "Manager",
    [1] "Employee",
    [2] "Publisher",
    [3] "Organizer",
    [4] "Admin",
    [5] "Assistant"
	]

*	2.7.0 :086 > Role.where(name:"Admin").exists?
	Role Exists? (1.1ms)  SELECT 1 AS one FROM "roles" WHERE "roles"."name" = $1 LIMIT $2  [["name", "Admin"], ["LIMIT", 1]]
	true

	2.7.0 :087 > Role.where(name:"admin").exists?
  	Role Exists? (1.1ms)  SELECT 1 AS one FROM "roles" WHERE "roles"."name" = $1 LIMIT $2  [["name", "admin"], ["LIMIT", 1]]
	false
	
*	2.7.0 :090 > Role.where(id:1).joins(:users).explain
  	Role Load (0.8ms)  SELECT "roles".* FROM "roles" INNER JOIN "users" ON "users"."role_id" = "roles"."id" WHERE "roles"."id" = $1  [["id", 1]]
	
	EXPLAIN for: SELECT "roles".* FROM "roles" INNER JOIN "users" ON "users"."role_id" = "roles"."id" WHERE "roles"."id" = $1 [["id", 1]]
	                                        QUERY PLAN
	-------------------------------------------------------------------------------------------
	 Nested Loop  (cost=4.31..17.69 rows=2 width=56)
	   ->  Index Scan using roles_pkey on roles  (cost=0.15..8.17 rows=1 width=56)
	         Index Cond: (id = '1'::bigint)
	   ->  Bitmap Heap Scan on users  (cost=4.16..9.50 rows=2 width=8)
	         Recheck Cond: (role_id = '1'::bigint)
	         ->  Bitmap Index Scan on index_users_on_role_id  (cost=0.00..4.16 rows=2 width=0)
	               Index Cond: (role_id = '1'::bigint)
	(7 rows)

*	Role.ids

	[
	    [0] 3,
	    [1] 1,
	    [2] 2,
	    [3] 6,
	    [4] 8,
	    [5] 9
	]

*	class Employee < ApplicationRecord
  		has_many :pictures ,:as => :combine
	end

	class Picture < ApplicationRecord
	  belongs_to :combine, :polymorphic =>true
	end

	class Product < ApplicationRecord
	    has_many :pictures ,:as => :combine
	end

	*Product.find(5).pictures

	[
    [0] #<Picture:0x0000560202407f90> 
    {
                  :id => 2,
                :name => "Phone pic",
          :combine_id => 5,
        :combine_type => "Product",
          :created_at => Fri, 14 Feb 2020 12:30:34 UTC +00:00,
          :updated_at => Fri, 14 Feb 2020 12:30:34 UTC +00:00
    }
	]

	* Employee.find(1).pictures

	[
    [0] #<Picture:0x00007f62bc3af248> 
    {
                  :id => 3,
                :name => "Vir's pic",
          :combine_id => 1,
        :combine_type => "Employee",
          :created_at => Fri, 14 Feb 2020 12:37:24 UTC +00:00,
          :updated_at => Fri, 14 Feb 2020 12:37:24 UTC +00:00
    }
]
------------------------------------------------------------------------
Practice Query Interface

1.  2.7.0 :055 > User.find_each(batch_size:2) do |u|
    2.7.0 :056 >   puts u.first_name
    2.7.0 :057 > end

      User Load (0.8ms)  SELECT "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT $1  [["LIMIT", 2]]
    Priya
    Rahul

      User Load (0.8ms)  SELECT "users".* FROM "users" WHERE "users"."id" > $1 ORDER BY "users"."id" ASC LIMIT $2  [["id", 2], ["LIMIT", 2]]
    Ritu
    Akansha

      User Load (1.1ms)  SELECT "users".* FROM "users" WHERE "users"."id" > $1 ORDER BY "users"."id" ASC LIMIT $2  [["id", 8], ["LIMIT", 2]]
    Ritika
    gunjan

      User Load (0.9ms)  SELECT "users".* FROM "users" WHERE "users"."id" > $1 ORDER BY "users"."id" ASC LIMIT $2  [["id", 10], ["LIMIT", 2]]
    kush
    g

      User Load (0.7ms)  SELECT "users".* FROM "users" WHERE "users"."id" > $1 ORDER BY "users"."id" ASC LIMIT $2  [["id", 14], ["LIMIT", 2]]
    rupa
    pryanshi

      User Load (1.1ms)  SELECT "users".* FROM "users" WHERE "users"."id" > $1 ORDER BY "users"."id" ASC LIMIT $2  [["id", 16], ["LIMIT", 2]]
    nil

2.  2.7.0 :061 > User.find_each(start: 7) do |u|
    2.7.0 :062 >   puts u.first_name
    2.7.0 :063 > end
      User Load (1.0ms)  SELECT "users".* FROM "users" WHERE "users"."id" >= $1 ORDER BY "users"."id" ASC LIMIT $2  [["id", 7], ["LIMIT", 1000]]
    Ritu
    Akansha
    Ritika
    gunjan
    kush
    g
    rupa
    pryanshi
    nil

3.  User.where(created_at:"10/2/2020".."15/2/2020")

4.  2.7.0 :095 > User.where(address:nil).delete_all
    User Destroy (132.6ms)  DELETE FROM "users" WHERE "users"."address" IS NULL
    3

5.  User.where(role_id:[2,3]).select :first_name

    [
    [0] #<User:0x0000561a1ae86900> {
                "id" => nil,
        "first_name" => "Rahul"
    },
    [1] #<User:0x0000561a1ae864f0> {
                "id" => nil,
        "first_name" => "Akansha"
    },
    [2] #<User:0x0000561a1ae86388> {
                "id" => nil,
        "first_name" => "Priya"
    }
    ]

6. Dependent: :destroy

   Role.last.destroy
  
  Role Load (0.7ms)  SELECT "roles".* FROM "roles" ORDER BY "roles"."id" DESC LIMIT $1  [["LIMIT", 1]]
   (0.5ms)  BEGIN
  User Load (0.7ms)  SELECT "users".* FROM "users" WHERE "users"."role_id" = $1  [["role_id", 9]]
  Event Load (1.0ms)  SELECT "events".* FROM "events" WHERE "events"."user_id" = $1  [["user_id", 21]]
  Event Destroy (1.0ms)  DELETE FROM "events" WHERE "events"."id" = $1  [["id", 16]]
  User Destroy (1.2ms)  DELETE FROM "users" WHERE "users"."id" = $1  [["id", 21]]
  Role Destroy (0.6ms)  DELETE FROM "roles" WHERE "roles"."id" = $1  [["id", 9]]
   (12.7ms)  COMMIT
  #<Role:0x0000561a1c1f0f18> {
              :id => 9,
            :name => "Accountant",
      :created_at => Wed, 19 Feb 2020 06:46:57 UTC +00:00,
      :updated_at => Wed, 19 Feb 2020 06:46:57 UTC +00:00
  }

7. Eager Loading

    2.7.0 :041 > user = User.limit(3)
    2.7.0 :042 > user.each do |u|
    2.7.0 :043 >   puts u.role.name
    2.7.0 :044 > end
      User Load (0.9ms)  SELECT "users".* FROM "users" LIMIT $1  [["LIMIT", 3]]
      Role Load (0.7ms)  SELECT "roles".* FROM "roles" WHERE "roles"."id" = $1 LIMIT $2  [["id", 3], ["LIMIT", 1]]
    Employee
      Role Load (0.5ms)  SELECT "roles".* FROM "roles" WHERE "roles"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]
    Admin
      Role Load (0.7ms)  SELECT "roles".* FROM "roles" WHERE "roles"."id" = $1 LIMIT $2  [["id", 3], ["LIMIT", 1]]
    Employee

    Solution to N+1 Queries problem
    2.7.0 :045 > y = User.includes(:role).limit(3)
    2.7.0 :046 > y.each do |u|
    2.7.0 :047 >   puts u.role.name
    2.7.0 :048 > end
      User Load (0.9ms)  SELECT "users".* FROM "users" LIMIT $1  [["LIMIT", 3]]
      Role Load (1.2ms)  SELECT "roles".* FROM "roles" WHERE "roles"."id" IN ($1, $2)  [["id", 3], ["id", 1]]
    Employee
    Admin
    Employee  

*  1. Array of multiple associations - Eager loading Multiple Association

    2.7.0 :070 > event = Event.includes(:user , :event_type)
    2.7.0 :071 > event.each do |e|
    2.7.0 :072 >   puts e.user.first_name
    2.7.0 :073 > end
      Event Load (1.1ms)  SELECT "events".* FROM "events"
      User Load (0.9ms)  SELECT "users".* FROM "users" WHERE "users"."id" IN ($1, $2, $3, $4)  [["id", 1], ["id", 2], ["id", 7], ["id", 8]]
      EventType Load (1.0ms)  SELECT "event_types".* FROM "event_types" WHERE "event_types"."id" IN ($1, $2, $3, $4)  [["id", 2], ["id", 1], ["id", 3], ["id", 5]]
    Priya
    Rahul
    Ritu
    Akansha
    Akansha

  2. Nested associations Hash
  
    2.7.0 :080 > event = Event.includes({ users: :role } , :event_type)
    2.7.0 :088 > event.each do |e|
    2.7.0 :089 >   puts e.user.role.name
    2.7.0 :090 > end
    Manager
    Employee
    Admin
    Employee
    Employee

*   Scopes

    1. scope :name_like_A,  -> {where("name like ? ","A%")}

    Role.name_like_A
    [
    [0] #<Role:0x000055d597df4d60> {
                :id => 1,
              :name => "Admin",
        :created_at => Tue, 11 Feb 2020 06:51:18 UTC +00:00,
        :updated_at => Tue, 11 Feb 2020 06:51:18 UTC +00:00
    },
    [1] #<Role:0x000055d597de31c8> {
                :id => 6,
              :name => "Assistant",
        :created_at => Wed, 12 Feb 2020 09:32:56 UTC +00:00,
        :updated_at => Wed, 12 Feb 2020 09:32:56 UTC +00:00
    }
    ]

    2. scope :name_like_A,  -> {where("name like ? ","A%").select(:name)}

      [
    [0] #<Role:0x00007f0f601ac9a0> {
          "id" => nil,
        "name" => "Admin"
    },
    [1] #<Role:0x00007f0f600c9948> {
          "id" => nil,
        "name" => "Assistant"
    }
    ]

    3. Chaining Scopes

      scope :age_greater_than_21,  ->{where("age > 21")}
      scope :age_and_address,  ->{age_greater_than_21.where("address like ?", "Goa")}

      User.age_and_address

      [
    [0] #<User:0x00007f511c4ab0b8> {
                        :id => 1,
                :first_name => "Priya",
                 :last_name => "Sharma",
                     :email => "priya@gmail.com",
                       :age => 28,
                    :gender => "Female",
                    :salary => 200000.0,
                   :role_id => 2,
                :created_at => Fri, 07 Feb 2020 12:10:26 UTC +00:00,
                :updated_at => Fri, 14 Feb 2020 05:14:51 UTC +00:00,
                   :address => "Goa",
                     :phone => 9884567896,
    }
]

    4. Passing in arguments

    scope :created_before,  ->(date) {where("created_at < ?",date).select(:id)}

    User.created_before("14 Feb 2020")

    [
    [0] #<User:0x00007f511c4a1b30> {
        "id" => 2
    },
    [1] #<User:0x000055ec29786ca0> {
        "id" => 7
    },
    [2] #<User:0x000055ec29786bd8> {
        "id" => 8
    },
    [3] #<User:0x000055ec29786b10> {
        "id" => 9
    },
    [4] #<User:0x000055ec29786a48> {
        "id" => 1
    }
    ]

    5. Conditional Scopes

      scope :address_delhi,  ->(address) {where("address like ?",address) if address.present?}

      User.address_delhi

      [
    [0] #<User:0x0000557e88bd07c0> {
                        :id => 2,
                :first_name => "Rahul",
                 :last_name => "jain",
                     :email => "Rahul@gamil.com",
                       :age => 23,
                    :gender => "male",
                    :salary => 25000.0,
                   :role_id => 3,
                :created_at => Tue, 11 Feb 2020 05:32:56 UTC +00:00,
                :updated_at => Tue, 11 Feb 2020 07:08:40 UTC +00:00,
                   :address => "Delhi",
                     :phone => 9811786234,
        :email_confirmation => nil
    }
    ]

    6. Default scope

     default_scope { where("email_confirmation is null") }  

     User.last
    User Load (1.9ms)  SELECT "users".* FROM "users" WHERE (email_confirmation is null) ORDER BY "users"."id" DESC LIMIT $1  [["LIMIT", 1]]

    7. Merging scopes

      * User.all

      User Exists? (0.9ms)  SELECT 1 AS one FROM "users" WHERE (email_confirmation is null) LIMIT $1  [["LIMIT", 1]]
      
      User Load (0.6ms)  SELECT "users".* FROM "users" WHERE (email_confirmation is null)

      
      * User.address_delhi("Delhi")
      
      User Exists? (1.6ms)  SELECT 1 AS one FROM "users" WHERE (email_confirmation is null) AND (address like 'Delhi') LIMIT $1  [["LIMIT", 1]]
      
      User Load (1.0ms)  SELECT "users".* FROM "users" WHERE (email_confirmation is null) AND (address like 'Delhi')

      
      * User.age_greater_than_21.address_delhi("Delhi")
        
        User Exists? (18.0ms)  SELECT 1 AS one FROM "users" WHERE (email_confirmation is null) AND (age > 21) AND (address like 'Delhi') LIMIT $1  [["LIMIT", 1]]
        
        User Load (0.8ms)  SELECT "users".* FROM "users" WHERE (email_confirmation is null) AND (age > 21) AND (address like 'Delhi')

      * User.address_delhi("Delhi").merge(User.created_before("14 Feb 2020"))

        User Exists? (1.2ms)  SELECT 1 AS one FROM "users" WHERE (email_confirmation is null) AND (address like 'Delhi') AND (email_confirmation is null) AND (created_at < '14 Feb 2020') LIMIT $1  [["LIMIT", 1]]
        
        User Load (1.0ms)  SELECT "users"."id" FROM "users" WHERE (email_confirmation is null) AND (address like 'Delhi') AND (email_confirmation is null) AND (created_at < '14 Feb 2020')
      [
          [0] #<User:0x00007f7c1c559750> {
              "id" => 2
          }
      ]

      8. Self Join
        class User < ApplicationRecord
          belongs_to :role, class_name: "User"
          has_many :employees ,class_name: "User", foreign_key: "role_id"
        end 
        
      1.  User.first.employees
        [
      [0] #<User:0x00007f1b848aaad8> {
                        :id => 9,
                :first_name => "Ritika",
                 :last_name => "Verma",
                     :email => "ritika@gmail.com",
                       :age => 31,
                    :gender => "female",
                    :salary => 71000.0,
                   :role_id => 1,
                :created_at => Tue, 11 Feb 2020 09:43:21 UTC +00:00,
                :updated_at => Tue, 11 Feb 2020 09:44:27 UTC +00:00,
                   :address => "Punjab",
                     :phone => 7865787098,
        :email_confirmation => nil
      },
      [1] #<User:0x00007f1b848aa9e8> {
                        :id => 7,
                :first_name => "Ritu",
                 :last_name => "Rao",
                     :email => "ritu@gmail.com",
                       :age => 21,
                    :gender => "Female",
                    :salary => 30000.0,
                   :role_id => 1,
                :created_at => Tue, 11 Feb 2020 07:11:35 UTC +00:00,
                :updated_at => Tue, 11 Feb 2020 07:11:35 UTC +00:00,
                   :address => "Fbd",
                     :phone => 4576553345,
        :email_confirmation => nil
    }
]
       2. User.find_by(id:Role.find_by(name:"Admin")).employees.select(:first_name,:role_id)

       [
          [0] #<User:0x0000561bc13fab28> {
                      "id" => nil,
              "first_name" => "Ritika",
                 "role_id" => 1
          },
          [1] #<User:0x0000561bc13f7b58> {
                      "id" => nil,
              "first_name" => "Ritu",
                 "role_id" => 1
          }
        ]

        5. User.joins(:employees_users).select(:first_name,:role_id).where(address:"Delhi")

          [
            [0] #<User:0x0000561bc3a5cf00> {
                        "id" => nil,
                "first_name" => "Rahul",
                   "role_id" => 3
            },
            [1] #<User:0x0000561bc3a5c708> {
                        "id" => nil,
                "first_name" => "Rahul",
                   "role_id" => 3
            }
          ]

  

  
------------------------------------------------------------------------
VALIDATIONS

*	class Role < ApplicationRecord
	  has_many :users, dependent: :destroy
	  validates :name , presence:true
	end
	
	2.7.0 :018 > p = Role.new
	
	2.7.0 :019 > p.errors.messages
	{}
	
	2.7.0 :020 > p.valid?
	false
	
	2.7.0 :021 > p.errors.messages
	{
	    :name => 
	    [
	        [0] "can't be blank"
	    ]
	}
	
	2.7.0 :022 > p = Role.create
	
	2.7.0 :023 > p.errors.messages
	{
	    :name => [
	        [0] "can't be blank"
	    ]
	}
	
	2.7.0 :024 > p.save
	false
	
	2.7.0 :025 > p.save!
	Traceback (most recent call last):
	ActiveRecord::RecordInvalid (Validation failed: Name can't be blank)

	2.7.0 :029 > p = Role.new
	
	2.7.0 :030 > p.invalid?
	true

	2.7.0 :032 > p.new_record?
	true

*	Errors[:attributes]-only check for errors if any

	2.7.0 :036 > Role.new.errors[:name].any?
	false
	
	2.7.0 :037 > Role.create.errors[:name].any?
	true
	
* 	Errors.details[:attribute]

	2.7.0 :038 > p = Role.new
	
	2.7.0 :039 > p.valid?
	false
	
	2.7.0 :040 > p.errors.details[:name]

*	class Role < ApplicationRecord
	  has_many :users, dependent: :destroy
	  validates :name , acceptance:true
	end

	2.7.0 :041 > s = Role.new
	2.7.0 :042 > s.valid?
	false
	
	2.7.0 :043 > s = Role.new(name:"Producer")
	2.7.0 :044 > s.valid?
	true

*	class User < ApplicationRecord
	  belongs_to :role
	  has_many :events, dependent: :destroy
	  has_many :event_types, through: :events
	  validates :email , confirmation:true
	  validates :email_confirmation, presence:true
	end

	2.7.0 :004 > p.email = "mahi@gmail.com"
	2.7.0 :005 > p.email_confirmation = "m@gmail.com"
	
	2.7.0 :007 > p.save!
	Traceback (most recent call last):
	        1: from (irb):7
	ActiveRecord::RecordInvalid (Validation failed: Email confirmation doesn't match Email)
	
	2.7.0 :008 > p.email_confirmation = "Mahi@gmail.com"
	
	2.7.0 :009 > p.save!
	Traceback (most recent call last):
	        1: from (irb):9
	ActiveRecord::RecordInvalid (Validation failed: Email confirmation doesn't match Email)

* class Role < ApplicationRecord
    has_many :users, dependent: :destroy
    validates :name , acceptance:true ,exclusion: {in: %w(worker), message:"%{value} is reserved"}
  end
 
  2.7.0 :010 > r = Role.new
  2.7.0 :011 > r.name = "woker"
  2.7.0 :012 > r.save!
  /home/beryl/.rvm/gems/ruby-2.7.0/gems/activemodel-6.0.2.1/lib/active_model/errors.rb:500: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /home/beryl/.rvm/gems/ruby-2.7.0/gems/i18n-1.8.2/lib/i18n.rb:195: warning: The called method `translate' is defined here
  Traceback (most recent call last):
          1: from (irb):12
  ActiveRecord::RecordInvalid (Validation failed: Name must be accepted)
  2.7.0 :013 > 
    
* class User < ApplicationRecord
    belongs_to :role
    has_many :events, dependent: :destroy
    has_many :event_types, through: :events
    validates :email , confirmation:true 
    validates :email_confirmation, presence:true
    validates :first_name ,format: { with: /\A[a-zA-Z]+\z/ ,message: "only allows letters"}
  end

  2.7.0 :019 > f = User.last
  User Load (1.1ms)  SELECT "users".* FROM "users" ORDER BY "users"."id" DESC LIMIT $1  [["LIMIT", 1]]
 
  2.7.0 :020 > f.first_name = "Rupa2"
  2.7.0 :021 > f.email = "rupa@gmail.com"
  2.7.0 :022 > f.email_confirmation = "rupa@gmail.com"
 
  2.7.0 :023 > f.save!
     (0.5ms)  BEGIN
    Role Load (0.7ms)  SELECT "roles".* FROM "roles" WHERE "roles"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]
     (0.4ms)  ROLLBACK
  Traceback (most recent call last):
          1: from (irb):23
 
  ActiveRecord::RecordInvalid (Validation failed: First name only allows letters)

* validates :gender ,inclusion: { in: %w(male female others), message: "%{value} is not valid"}

  2.7.0 :002 > f.gender = "othersss"
  2.7.0 :003 > f.save!
  ActiveRecord::RecordInvalid (Validation failed: Gender othersss is not valid)

* validates :name ,exclusion: {in: %w(worker), message:"%{value} is reserved"} , length: { minimum: 2 }

  2.7.0 :001 > r = Role.last
  Role Load (0.7ms)  SELECT "roles".* FROM "roles" ORDER BY "roles"."id" DESC LIMIT $1  [["LIMIT", 1]]
  
  2.7.0 :002 > r.name = "P"
  
  2.7.0 :003 > r.save!
  ActiveRecord::RecordInvalid (Validation failed: Name is too short (minimum is 2 characters))

* validates :salary, numericality: true
  validates :age, numericality: { only_integer: true}

  2.7.0 :004 > u = User.last
  2.7.0 :005 > u.age = 34.9
  2.7.0 :006 > u.salary = 35000.0
  2.7.0 :007 > u.save!
  ActiveRecord::RecordInvalid (Validation failed: Age must be an integer)

* validates :email , confirmation:true ,uniqueness: true 

  2.7.0 :002 > u = User.last
  User Load (1.2ms)  SELECT "users".* FROM "users" ORDER BY "users"."id" DESC LIMIT $1  [["LIMIT", 1]]
  
  2.7.0 :003 > u.email = "rupa@gmail.com"
  
  2.7.0 :004 > u.email_confirmation = "rupa@gmail.com"
  
  2.7.0 :005 > u.save!
     (0.5ms)  BEGIN
    Role Load (0.8ms)  SELECT "roles".* FROM "roles" WHERE "roles"."id" = $1 LIMIT $2  [["id", 2], ["LIMIT", 1]]
    User Exists? (2.0ms)  SELECT 1 AS one FROM "users" WHERE "users"."email" = $1 AND "users"."id" != $2 LIMIT $3  [["email", "rupa@gmail.com"], ["id", 15], ["LIMIT", 1]]
  
  ActiveRecord::RecordInvalid (Validation failed: Email has already been taken)

* validates_each :first_name, :last_name do |record ,attr,value|
    record.errors.add(attr, 'must start with upper case') if value =~ /\A[[:lower:]]/
  end

  2.7.0 :012 > a = User.last
  User Load (0.8ms)  SELECT "users".* FROM "users" ORDER BY "users"."id" DESC LIMIT $1  [["LIMIT", 1]]
  
  2.7.0 :013 > a.first_name = "Pryanshi"
  
  2.7.0 :014 > a.last_name = "nagpal"
  
  2.7.0 :015 > a.save!
     (0.6ms)  BEGIN
    Role Load (0.8ms)  SELECT "roles".* FROM "roles" WHERE "roles"."id" = $1 LIMIT $2  [["id", 3], ["LIMIT", 1]]
    User Exists? (0.9ms)  SELECT 1 AS one FROM "users" WHERE "users"."email" = $1 AND "users"."id" != $2 LIMIT $3  [["email", "pryanshi@gmail.com"], ["id", 16], ["LIMIT", 1]]
     (0.6ms)  ROLLBACK
  Traceback (most recent call last):
          1: from (irb):15
  
  ActiveRecord::RecordInvalid (Validation failed: Email confirmation can't be blank, Last name must start with upper case)
  
* validates :name ,exclusion: {in: %w(worker), message:"%{value} is reserved"} , length: { minimum: 2 } , allow_blank: true

  validates :gender ,inclusion: { in: %w(male female others), message: "%{value} is not valid"} ,allow_nil: true

  2.7.0 :001 > u = Role.new
  
  2.7.0 :002 > u.name = " "
  
  2.7.0 :003 > u.save!
     (0.6ms)  BEGIN
    Role Create (19.9ms)  INSERT INTO "roles" ("name", "created_at", "updated_at") VALUES ($1, $2, $3) RETURNING "id"  [["name", " "], ["created_at", "2020-02-15 11:24:00.034749"], ["updated_at", "2020-02-15 11:24:00.034749"]]
     (17.3ms)  COMMIT
  true
  
  2.7.0 :004 > Role.last
    Role Load (0.8ms)  SELECT "roles".* FROM "roles" ORDER BY "roles"."id" DESC LIMIT $1  [["LIMIT", 1]]

  #<Role:0x00005623b4caa458> {
              :id => 10,
            :name => " ",
      :created_at => Sat, 15 Feb 2020 11:24:00 UTC +00:00,
      :updated_at => Sat, 15 Feb 2020 11:24:00 UTC +00:00
  }

* on 

   u = User.new(email:"rupa@gmail.com",role_id:1,age:23)
   
  - u.valid?
   Role Load (1.0ms)  SELECT "roles".* FROM "roles" WHERE "roles"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]
    true
   
  - u.valid?(:account_setup) 
   User Exists? (1.0ms)  SELECT 1 AS one FROM "users" WHERE "users"."email" = $1 LIMIT $2  [["email", "rupa@gmail.com"], ["LIMIT", 1]]
   false

  - 
  {
      :email => [
          [0] "has already been taken"
      ]
  }

* validates :first_name ,format: { with: /\A[a-zA-Z]+\z/ ,message: "only allows letters"} , presence:
  {strict: true}

  User.new.valid?  

  ActiveModel::StrictValidationFailed (First name can't be blank) 

* validates :age, presence: true, if: :age_greater_than_30?

 def age_greater_than_30?
   if age > 30
     return true
   else
     return false
   end
 end

* Custom Validators
  
  class MyValidator < ActiveModel::Validator
  def validate(role)
    unless role.name.starts_with? 'A'
      role.errors[:name] << 'name should start with A'
  end
 end
end

class Role < ApplicationRecord
  has_many :users, dependent: :destroy
  validates :name ,exclusion: {in: %w(worker), message:"%{value} is reserved"} , length: { minimum: 2 } , allow_blank: true
  include ActiveModel::Validations
  validates_with MyValidator
end

a = Role.new(name:'Learner')

{
    :name => [
        [0] "name should start with A"
    ]
}

* class User < ApplicationRecord
  belongs_to :role
  has_many :events, dependent: :destroy
  has_many :event_types, through: :events
  validate :age_greater_than_21
  
  def age_greater_than_21
    if age.present? && age < 21
      errors.add(:age, "can't be less than 21")
    end
  end 
  end

  a = User.new(role_id:1,age:11,first_name:"Ritika")

  {
    :age => [
        [0] "can't be less than 21"
    ]
  }

-----------------------------------------------------------------------------------
Queries on Event Table
*  Event.where(event_type_id:EventType.find_by(type_:"Birthday"),user_id:Role.find_by(name:"Admin")).select(:name,:id)

  With join:-
  Event.joins(:user,:event_type).where(event_type_id:EventType.find_by(type_:"Birthday"),user_id:Role.find_by(name:"Admin"))

  [
    [0] #<Event:0x00007f488046ef40> 
    {
                   :id => 10,
                 :name => "Priya Birthday",
                 :date => Sat, 23 Mar 2019,
        :event_type_id => 2,
           :created_at => Tue, 11 Feb 2020 09:29:45 UTC +00:00,
           :updated_at => Tue, 11 Feb 2020 09:29:45 UTC +00:00,
              :user_id => 1
    }
  ]

* User.joins(:events).select("id","first_name,count(user_id)").group(:first_name,:id)
  
  [
    [0] #<User:0x000055fdbc053ec0> {
                "id" => 2,
        "first_name" => "Rahul",
             "count" => 1
    },
    [1] #<User:0x000055fdbc053cb8> {
                "id" => 7,
        "first_name" => "Ritu",
             "count" => 1
    },
    [2] #<User:0x000055fdbc053ba0> {
                "id" => 1,
        "first_name" => "Priya",
             "count" => 1
    },
    [3] #<User:0x000055fdbc053948> {
                "id" => 8,
        "first_name" => "Akansha",
             "count" => 2
    }
]

---------------------------------------------------------------
Hosital Management Database

* Inserted data
  
  Hospital.create(Name:"Lilavati Hospital",Address:"Lilavati Hospital, A-791 Bandra Reclamation rd",State:"Mumbai",Beds:500)

  Appointment.create(Start_date:"20/12/2019",End_date:"1/1/2020",patient_id:3,doctor_id:1)

  MedicalRecord.create(Problem:"Skin allergy",Date_of_examination:"17/2/1999",doctor_id:2,patient_id:3)

  Doctor.create(First_name:"Dr.Meena",Last_name:"Kapoor",Qualifications:"Cardiologist",Gender:"female",salary:420000,email:"meena@gmail.com",mobile:9689264677,age:22,hospital_id:1)

  Patient.create(First_Name:"Priya",Last_Name:"Sharma",age:23,Address:"New Delhi",Mobile:9866756890,hospital_id:1,Gender:"female")

* Associations

  class Hospital < ApplicationRecord
    has_many :patients
    has_many :doctors
  end

  class Patient < ApplicationRecord
    belongs_to :hospital
    has_many :appointments
    has_many :doctors , through: :appointments
    has_many :medical_records
  end

  class Doctor < ApplicationRecord
    has_many :appointments
    has_many :patients , through: :appointments
    belongs_to :hospital
    has_many :medical_records
  end

  class MedicalRecord < ApplicationRecord
    belongs_to :doctor
    belongs_to :patient
  end

  //One patient can have examination done by different doctor and have appointment done by different doctor of same problem 
  class Appointment < ApplicationRecord
    belongs_to :doctor
    belongs_to :patient
  end

* Join Queries

1.  Patient.joins(:medical_records).select("First_Name",:Problem)

  [
    [0] #<Patient:0x00007f352c343678> {
                "id" => nil,
        "First_Name" => "Priya",
           "Problem" => "skin allergy"
    },
    [1] #<Patient:0x00007f352c343560> {
                "id" => nil,
        "First_Name" => "Ritesh",
           "Problem" => "heart problem"
    },
    [2] #<Patient:0x00007f352c343498> {
                "id" => nil,
        "First_Name" => "Priya",
           "Problem" => "Tooth ache"
    },
    [3] #<Patient:0x00007f352c343330> {
                "id" => nil,
        "First_Name" => "Ravi",
           "Problem" => "Skin allergy"
    }
]

2.  Patient.joins(:medical_records).select("First_Name","count(patient_id)").group(:First_Name)

  [
    [0] #<Patient:0x0000557b00ad0810> {
                "id" => nil,
        "First_Name" => "Ravi",
             "count" => 1
    },
    [1] #<Patient:0x0000557b00ad0720> {
                "id" => nil,
        "First_Name" => "Priya",
             "count" => 2
    },
    [2] #<Patient:0x0000557b00ad0658> {
                "id" => nil,
        "First_Name" => "Ritesh",
             "count" => 1
    }
]

3.  Doctor.joins(:medical_records).select("First_name","count(doctor_id)").group(:First_name)

[
    [0] #<Doctor:0x0000557b0046c578> {
                "id" => nil,
        "First_name" => "Dr.Palak",
             "count" => 2
    },
    [1] #<Doctor:0x0000557b0046c2f8> {
                "id" => nil,
        "First_name" => "Dr.Rakesh",
             "count" => 1
    },
    [2] #<Doctor:0x0000557b0046c0f0> {
                "id" => nil,
        "First_name" => "Dr.Meena",
             "count" => 1
    }
]

4.  Patient.joins(:medical_records ,:doctors).where("patients.age>28",doctor_id:Doctor.find_by(Qualifications:"Determatologist")).select("patients.id",:Problem,"First_Name")
  
  [
    [0] #<Patient:0x0000557b00db7768> {
                "id" => 3,
        "First_Name" => "Ravi",
           "Problem" => "Skin allergy"
    }
]

5. Hospital.joins(:doctors).select(:Name,"count(hospital_id)").group(:Name)

  [
    [0] #<Hospital:0x0000557b00a12338> {
           "id" => nil,
         "Name" => "Fortis Hospital",
        "count" => 1
    },
    [1] #<Hospital:0x0000557b00a12270> {
           "id" => nil,
         "Name" => "AIIMS,All India Institue of Medical Sciences",
        "count" => 2
    },
    [2] #<Hospital:0x0000557b00a12158> {
           "id" => nil,
         "Name" => "Lilavati Hospital",
        "count" => 1
    }
  ]

--------------------------------------------------------------------------------------------------------
CONTROLLER

* rake g controller department

* class DepartmentController < ApplicationController
  def patient
    @patient = Patient.all
  end
end

* <html>
    <head>
      <meta charset="utf-8">
      <title>patient</title>
    </head>
    <body bgcolor="wheat">
        Gunjan Gaur
    </body>
  </html>

* get 'department/patient' 

* @array = [1,2,3,4,5] 

  <body bgcolor="wheat">
    <%@arr%>
    <%@array.each do |arr| %>
         <%=arr%>
    <%end%>
  </body>